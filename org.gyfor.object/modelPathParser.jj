options {
  JDK_VERSION = "1.5";
  STATIC = false;
  LOOKAHEAD = 3;
  FORCE_LA_CHECK = true;
}


PARSER_BEGIN(ModelPathParser)
package org.gyfor.object.model.path.parser;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

import org.gyfor.object.model.path.DescendentPath;
import org.gyfor.object.model.path.IndexedElementPath;
import org.gyfor.object.model.path.LastElementPath;
import org.gyfor.object.model.path.NamedMemberPath;
import org.gyfor.object.model.path.StepPath;
import org.gyfor.object.model.path.WildcardPath;

public class ModelPathParser {

  private static class NullInputStream extends InputStream {
    @Override
    public int read() {
      return 0;
    }
  }
    
  public static void main(String args[]) throws ParseException 
  {
    ModelPathParser parser = new ModelPathParser(System.in);
    while (true) {
      parser.parse();
    }
  }
    
  public ModelPathParser () {
    this(new NullInputStream());
  } 
    
  public StepPath parse(String s) throws ParseException {
    ReInit(new ByteArrayInputStream(s.getBytes()));
    return parse();
  }      
}

PARSER_END(ModelPathParser)

SKIP :
{
    " "
  | "\t"
}

TOKEN:
{
	< LAST: "last" >
  | < DOTDOT: ".." >
  | < NUMBER: (<DIGIT>)+ >
  | < #DIGIT: ["0"-"9"] >
  | < #LETTER: ["a"-"z", "A"-"Z"] >
  | < NAME: <LETTER> ("_" | <LETTER> | <DIGIT>)* >
}

StepPath parse() :
{
    StepPath top = new StepPath();
    StepPath ex = top;
}
{
    (
      ex = relativePath(ex)
    )?
    
    (
        <DOTDOT> ex = relativePath(new DescendentPath(ex))
    )*
    
    (   <DOTDOT> 
        {
           ex = new DescendentPath(ex);
        }
    )?
    
    <EOF>
    {
        return top;
    }
}


StepPath relativePath(StepPath parent) :
{
  StepPath ex = null;
}
{
  (
      ex = namedStep(parent)
  |
      ex = indexedStep(parent)
  )
  (
      "." ex=namedStep(ex)
  |
      ex=indexedStep(ex)
  )*
  {
    return ex;
  } 
}


StepPath namedStep (StepPath parent) :
{
  StepPath ex = null;
  Token n = null;
}
{
  (
      "*" 
      {
          ex = new WildcardPath(parent);
      }      
  | 
      n=<NAME>
      {
          ex = new NamedMemberPath(parent, n.toString());
      }      
  )
  {
    return ex;
  }
}


StepPath indexedStep(StepPath parent) :
{
  StepPath ex;
  Token n = null;
}
{
  "["
  (
     "last" 
     { ex = new LastElementPath(parent); }
  |
     n=<NUMBER>
     { ex = new IndexedElementPath(parent, n.toString()); }
  )
  "]"
  { return ex; }
}
